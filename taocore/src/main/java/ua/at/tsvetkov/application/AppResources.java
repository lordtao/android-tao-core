package ua.at.tsvetkov.application;

import android.annotation.TargetApi;
import android.app.Application;
import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.content.res.AssetManager;
import android.content.res.ColorStateList;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.content.res.Resources.NotFoundException;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.Movie;
import android.graphics.drawable.Drawable;
import android.os.Build;
import android.support.annotation.AnimRes;
import android.support.annotation.AnyRes;
import android.support.annotation.ArrayRes;
import android.support.annotation.BoolRes;
import android.support.annotation.ColorInt;
import android.support.annotation.ColorRes;
import android.support.annotation.DimenRes;
import android.support.annotation.DrawableRes;
import android.support.annotation.FractionRes;
import android.support.annotation.IntegerRes;
import android.support.annotation.LayoutRes;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.PluralsRes;
import android.support.annotation.RawRes;
import android.support.annotation.StringRes;
import android.support.annotation.XmlRes;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.TypedValue;

import java.io.InputStream;

/**
 * Singleton for application resources. Initialize by {@link AppConfig#init(Application)} or manually if AppConfig is not used.
 * Created by Alexandr Tsvetkov on 01.02.2016.
 */
public class AppResources {

    private static Resources resources;

    private AppResources() {

    }

    /**
     * Auto initialize by {@link AppConfig#init(Application)} or manually if AppConfig is not used.
     *
     * @param context
     */
    public static void init(Context context) {
        resources = context.getResources();
    }

    /**
     * Return a global shared Resources object that provides access to only
     * system resources (no application resources), and is not configured for
     * the current screen (can not use dimension units, does not change based
     * on orientation, etc).
     */
    public static Resources getSystem() {
        return resources.getSystem();
    }

    /**
     * Return the string value associated with a particular resource ID.  The
     * returned object will be a String if this is a plain string; it will be
     * some other type of CharSequence if it is styled.
     * {@more}
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return CharSequence The string data associated with the resource, plus
     * possibly styled text information.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static CharSequence getText(@StringRes int id) throws NotFoundException {
        return resources.getText(id);
    }

    /**
     * Returns the character sequence necessary for grammatically correct pluralization
     * of the given resource ID for the given quantity.
     * Note that the character sequence is selected based solely on grammatical necessity,
     * and that such rules differ between languages. Do not assume you know which string
     * will be returned for a given quantity. See
     * <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
     * for more detail.
     *
     * @param id       The desired resource identifier, as generated by the aapt
     *                 tool. This integer encodes the package, type, and resource
     *                 entry. The value 0 is an invalid identifier.
     * @param quantity The number used to get the correct string for the current language's
     *                 plural rules.
     * @return CharSequence The string data associated with the resource, plus
     * possibly styled text information.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static CharSequence getQuantityText(@PluralsRes int id, int quantity) throws NotFoundException {
        return resources.getQuantityText(id, quantity);
    }

    /**
     * Return the string value associated with a particular resource ID.  It
     * will be stripped of any styled text information.
     * {@more}
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return String The string data associated with the resource,
     * stripped of styled text information.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    @NonNull
    public static String getString(@StringRes int id) throws NotFoundException {
        return resources.getString(id);
    }


    /**
     * Return the string value associated with a particular resource ID,
     * substituting the format arguments as defined in {@link java.util.Formatter}
     * and {@link java.lang.String#format}. It will be stripped of any styled text
     * information.
     * {@more}
     *
     * @param id         The desired resource identifier, as generated by the aapt
     *                   tool. This integer encodes the package, type, and resource
     *                   entry. The value 0 is an invalid identifier.
     * @param formatArgs The format arguments that will be used for substitution.
     * @return String The string data associated with the resource,
     * stripped of styled text information.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    @NonNull
    public static String getString(@StringRes int id, Object... formatArgs) throws NotFoundException {
        return resources.getString(id, formatArgs);
    }

    /**
     * Formats the string necessary for grammatically correct pluralization
     * of the given resource ID for the given quantity, using the given arguments.
     * Note that the string is selected based solely on grammatical necessity,
     * and that such rules differ between languages. Do not assume you know which string
     * will be returned for a given quantity. See
     * <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
     * for more detail.
     * <p/>
     * <p>Substitution of format arguments works as if using
     * {@link java.util.Formatter} and {@link java.lang.String#format}.
     * The resulting string will be stripped of any styled text information.
     *
     * @param id         The desired resource identifier, as generated by the aapt
     *                   tool. This integer encodes the package, type, and resource
     *                   entry. The value 0 is an invalid identifier.
     * @param quantity   The number used to get the correct string for the current language's
     *                   plural rules.
     * @param formatArgs The format arguments that will be used for substitution.
     * @return String The string data associated with the resource,
     * stripped of styled text information.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static String getQuantityString(@PluralsRes int id, int quantity, Object... formatArgs) throws NotFoundException {
        return resources.getQuantityString(id, quantity, formatArgs);
    }

    /**
     * Returns the string necessary for grammatically correct pluralization
     * of the given resource ID for the given quantity.
     * Note that the string is selected based solely on grammatical necessity,
     * and that such rules differ between languages. Do not assume you know which string
     * will be returned for a given quantity. See
     * <a href="{@docRoot}guide/topics/resources/string-resource.html#Plurals">String Resources</a>
     * for more detail.
     *
     * @param id       The desired resource identifier, as generated by the aapt
     *                 tool. This integer encodes the package, type, and resource
     *                 entry. The value 0 is an invalid identifier.
     * @param quantity The number used to get the correct string for the current language's
     *                 plural rules.
     * @return String The string data associated with the resource,
     * stripped of styled text information.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static String getQuantityString(@PluralsRes int id, int quantity) throws NotFoundException {
        return resources.getQuantityString(id, quantity);
    }

    /**
     * Return the string value associated with a particular resource ID.  The
     * returned object will be a String if this is a plain string; it will be
     * some other type of CharSequence if it is styled.
     *
     * @param id  The desired resource identifier, as generated by the aapt
     *            tool. This integer encodes the package, type, and resource
     *            entry. The value 0 is an invalid identifier.
     * @param def The default CharSequence to return.
     * @return CharSequence The string data associated with the resource, plus
     * possibly styled text information, or def if id is 0 or not found.
     */
    public static CharSequence getText(@StringRes int id, CharSequence def) {
        return resources.getText(id, def);
    }

    /**
     * Return the styled text array associated with a particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return The styled text array associated with the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static CharSequence[] getTextArray(@ArrayRes int id) throws NotFoundException {
        return resources.getTextArray(id);
    }

    /**
     * Return the string array associated with a particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return The string array associated with the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static String[] getStringArray(@ArrayRes int id) throws NotFoundException {
        return resources.getStringArray(id);
    }

    /**
     * Return the int array associated with a particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return The int array associated with the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static int[] getIntArray(@ArrayRes int id) throws NotFoundException {
        return resources.getIntArray(id);
    }

    /**
     * Return an array of heterogeneous values.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return Returns a TypedArray holding an array of the array values.
     * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}
     * when done with it.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static TypedArray obtainTypedArray(@ArrayRes int id) throws NotFoundException {
        return resources.obtainTypedArray(id);
    }

    /**
     * Retrieve a dimensional for a particular resource ID.  Unit
     * conversions are based on the current {@link DisplayMetrics} associated
     * with the resources.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return Resource dimension value multiplied by the appropriate
     * metric.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getDimensionPixelOffset
     * @see #getDimensionPixelSize
     */
    public static float getDimension(@DimenRes int id) throws NotFoundException {
        return resources.getDimension(id);
    }

    /**
     * Retrieve a dimensional for a particular resource ID for use
     * as an offset in raw pixels.  This is the same as
     * {@link #getDimension}, except the returned value is converted to
     * integer pixels for you.  An offset conversion involves simply
     * truncating the base value to an integer.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return Resource dimension value multiplied by the appropriate
     * metric and truncated to integer pixels.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getDimension
     * @see #getDimensionPixelSize
     */
    public static int getDimensionPixelOffset(@DimenRes int id) throws NotFoundException {
        return resources.getDimensionPixelOffset(id);
    }

    /**
     * Retrieve a dimensional for a particular resource ID for use
     * as a size in raw pixels.  This is the same as
     * {@link #getDimension}, except the returned value is converted to
     * integer pixels for use as a size.  A size conversion involves
     * rounding the base value, and ensuring that a non-zero base value
     * is at least one pixel in size.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return Resource dimension value multiplied by the appropriate
     * metric and truncated to integer pixels.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getDimension
     * @see #getDimensionPixelOffset
     */
    public static int getDimensionPixelSize(@DimenRes int id) throws NotFoundException {
        return resources.getDimensionPixelSize(id);
    }

    /**
     * Retrieve a fractional unit for a particular resource ID.
     *
     * @param id    The desired resource identifier, as generated by the aapt
     *              tool. This integer encodes the package, type, and resource
     *              entry. The value 0 is an invalid identifier.
     * @param base  The base value of this fraction.  In other words, a
     *              standard fraction is multiplied by this value.
     * @param pbase The parent base value of this fraction.  In other
     *              words, a parent fraction (nn%p) is multiplied by this
     *              value.
     * @return Attribute fractional value multiplied by the appropriate
     * base value.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static float getFraction(@FractionRes int id, int base, int pbase) {
        return resources.getFraction(id, base, pbase);
    }

    /**
     * Return a drawable object associated with a particular resource ID.
     * Various types of objects will be returned depending on the underlying
     * resource -- for example, a solid color, PNG image, scalable image, etc.
     * The Drawable API hides these implementation details.
     * <p/>
     * <p class="note"><strong>Note:</strong> Prior to
     * {@link android.os.Build.VERSION_CODES#JELLY_BEAN}, this function
     * would not correctly retrieve the final configuration density when
     * the resource ID passed here is an alias to another Drawable resource.
     * This means that if the density configuration of the alias resource
     * is different than the actual resource, the density of the returned
     * Drawable would be incorrect, resulting in bad scaling.  To work
     * around this, you can instead retrieve the Drawable through
     * {@link TypedArray#getDrawable TypedArray.getDrawable}.  Use
     * {@link android.content.Context#obtainStyledAttributes(int[])
     * Context.obtainStyledAttributes} with
     * an array containing the resource ID of interest to create the TypedArray.</p>
     * <p/>
     * <p class="note"><strong>Note:</strong> To obtain a themed drawable, use
     * {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}
     * or {@link #getDrawable(int, Theme)} passing the desired theme.</p>
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return Drawable An object that can be used to draw this resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     * @see #getDrawable(int, Theme)
     * @deprecated Use {@link #getDrawable(int, Theme)} instead.
     */
    @Deprecated
    @Nullable
    public static Drawable getDrawable(@DrawableRes int id) throws NotFoundException {
        return resources.getDrawable(id);
    }

    /**
     * Return a drawable object associated with a particular resource ID and
     * styled for the specified theme. Various types of objects will be
     * returned depending on the underlying resource -- for example, a solid
     * color, PNG image, scalable image, etc.
     *
     * @param id    The desired resource identifier, as generated by the aapt
     *              tool. This integer encodes the package, type, and resource
     *              entry. The value 0 is an invalid identifier.
     * @param theme The theme used to style the drawable attributes, may be {@code null}.
     * @return Drawable An object that can be used to draw this resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     */
    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    @Nullable
    public static Drawable getDrawable(@DrawableRes int id, @Nullable Theme theme) throws NotFoundException {
        return resources.getDrawable(id, theme);
    }

    /**
     * Return a drawable object associated with a particular resource ID for the
     * given screen density in DPI. This will set the drawable's density to be
     * the device's density multiplied by the ratio of actual drawable density
     * to requested density. This allows the drawable to be scaled up to the
     * correct size if needed. Various types of objects will be returned
     * depending on the underlying resource -- for example, a solid color, PNG
     * image, scalable image, etc. The Drawable API hides these implementation
     * details.
     * <p/>
     * <p class="note"><strong>Note:</strong> To obtain a themed drawable, use
     * {@link android.content.Context#getDrawable(int) Context.getDrawable(int)}
     * or {@link #getDrawableForDensity(int, int, Theme)} passing the desired
     * theme.</p>
     *
     * @param id      The desired resource identifier, as generated by the aapt tool.
     *                This integer encodes the package, type, and resource entry.
     *                The value 0 is an invalid identifier.
     * @param density the desired screen density indicated by the resource as
     *                found in {@link DisplayMetrics}.
     * @return Drawable An object that can be used to draw this resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     * @see #getDrawableForDensity(int, int, Theme)
     * @deprecated Use {@link #getDrawableForDensity(int, int, Theme)} instead.
     */
    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
    @Deprecated
    @Nullable
    public static Drawable getDrawableForDensity(@DrawableRes int id, int density) throws NotFoundException {
        return resources.getDrawableForDensity(id, density);
    }

    /**
     * Return a drawable object associated with a particular resource ID for the
     * given screen density in DPI and styled for the specified theme.
     *
     * @param id      The desired resource identifier, as generated by the aapt tool.
     *                This integer encodes the package, type, and resource entry.
     *                The value 0 is an invalid identifier.
     * @param density The desired screen density indicated by the resource as
     *                found in {@link DisplayMetrics}.
     * @param theme   The theme used to style the drawable attributes, may be {@code null}.
     * @return Drawable An object that can be used to draw this resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     */
    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    @Nullable
    public static Drawable getDrawableForDensity(@DrawableRes int id, int density, @Nullable Theme theme) {
        return resources.getDrawableForDensity(id, density, theme);
    }

    /**
     * Return a movie object associated with the particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static Movie getMovie(@RawRes int id) throws NotFoundException {
        return resources.getMovie(id);
    }

    /**
     * Returns a color integer associated with a particular resource ID. If the
     * resource holds a complex {@link ColorStateList}, then the default color
     * from the set is returned.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return A single color value in the form 0xAARRGGBB.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     * @deprecated Use {@link #getColor(int, Theme)} instead.
     */
    @ColorInt
    @Deprecated
    public static int getColor(@ColorRes int id) throws NotFoundException {
        return resources.getColor(id);
    }

    /**
     * Returns a themed color integer associated with a particular resource ID.
     * If the resource holds a complex {@link ColorStateList}, then the default
     * color from the set is returned.
     *
     * @param id    The desired resource identifier, as generated by the aapt
     *              tool. This integer encodes the package, type, and resource
     *              entry. The value 0 is an invalid identifier.
     * @param theme The theme used to style the color attributes, may be
     *              {@code null}.
     * @return A single color value in the form 0xAARRGGBB.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     */
    @TargetApi(Build.VERSION_CODES.M)
    @ColorInt
    public static int getColor(@ColorRes int id, @Nullable Theme theme) throws NotFoundException {
        return resources.getColor(id, theme);
    }

    /**
     * Returns a color state list associated with a particular resource ID. The
     * resource may contain either a single raw color value or a complex
     * {@link ColorStateList} holding multiple possible colors.
     *
     * @param id The desired resource identifier of a {@link ColorStateList},
     *           as generated by the aapt tool. This integer encodes the
     *           package, type, and resource entry. The value 0 is an invalid
     *           identifier.
     * @return A ColorStateList object containing either a single solid color
     * or multiple colors that can be selected based on a state.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     * @deprecated Use {@link #getColorStateList(int, Theme)} instead.
     */
    @Nullable
    @Deprecated
    public static ColorStateList getColorStateList(@ColorRes int id) throws NotFoundException {
        return resources.getColorStateList(id);
    }

    /**
     * Returns a themed color state list associated with a particular resource
     * ID. The resource may contain either a single raw color value or a
     * complex {@link ColorStateList} holding multiple possible colors.
     *
     * @param id    The desired resource identifier of a {@link ColorStateList},
     *              as generated by the aapt tool. This integer encodes the
     *              package, type, and resource entry. The value 0 is an invalid
     *              identifier.
     * @param theme The theme used to style the color attributes, may be
     *              {@code null}.
     * @return A themed ColorStateList object containing either a single solid
     * color or multiple colors that can be selected based on a state.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     */
    @TargetApi(Build.VERSION_CODES.M)
    @Nullable
    public static ColorStateList getColorStateList(@ColorRes int id, @Nullable Theme theme) throws NotFoundException {
        return resources.getColorStateList(id, theme);
    }

    /**
     * Return a boolean associated with a particular resource ID.  This can be
     * used with any integral resource value, and will return true if it is
     * non-zero.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return Returns the boolean value contained in the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static boolean getBoolean(@BoolRes int id) throws NotFoundException {
        return resources.getBoolean(id);
    }

    /**
     * Return an integer associated with a particular resource ID.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return Returns the integer value contained in the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static int getInteger(@IntegerRes int id) throws NotFoundException {
        return resources.getInteger(id);
    }

    /**
     * Return an XmlResourceParser through which you can read a view layout
     * description for the given resource ID.  This parser has limited
     * functionality -- in particular, you can't change its input, and only
     * the high-level events are available.
     * <p/>
     * <p>This function is really a simple wrapper for calling
     * {@link #getXml} with a layout resource.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return A new parser object through which you can read
     * the XML data.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getXml
     */
    public static XmlResourceParser getLayout(@LayoutRes int id) throws NotFoundException {
        return resources.getLayout(id);
    }

    /**
     * Return an XmlResourceParser through which you can read an animation
     * description for the given resource ID.  This parser has limited
     * functionality -- in particular, you can't change its input, and only
     * the high-level events are available.
     * <p/>
     * <p>This function is really a simple wrapper for calling
     * {@link #getXml} with an animation resource.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return A new parser object through which you can read
     * the XML data.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getXml
     */
    public static XmlResourceParser getAnimation(@AnimRes int id) throws NotFoundException {
        return resources.getAnimation(id);
    }

    /**
     * Return an XmlResourceParser through which you can read a generic XML
     * resource for the given resource ID.
     * <p/>
     * <p>The XmlPullParser implementation returned here has some limited
     * functionality.  In particular, you can't change its input, and only
     * high-level parsing events are available (since the document was
     * pre-parsed for you at build time, which involved merging text and
     * stripping comments).
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return A new parser object through which you can read
     * the XML data.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see android.util.AttributeSet
     */
    public static XmlResourceParser getXml(@XmlRes int id) throws NotFoundException {
        return resources.getXml(id);
    }

    /**
     * Open a data stream for reading a raw resource.  This can only be used
     * with resources whose value is the name of an asset files -- that is, it can be
     * used to open drawable, sound, and raw resources; it will fail on string
     * and color resources.
     *
     * @param id The resource identifier to open, as generated by the appt
     *           tool.
     * @return InputStream Access to the resource data.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static InputStream openRawResource(@RawRes int id) throws NotFoundException {
        return resources.openRawResource(id);
    }

    /**
     * Open a data stream for reading a raw resource.  This can only be used
     * with resources whose value is the name of an asset file -- that is, it can be
     * used to open drawable, sound, and raw resources; it will fail on string
     * and color resources.
     *
     * @param id    The resource identifier to open, as generated by the appt tool.
     * @param value The TypedValue object to hold the resource information.
     * @return InputStream Access to the resource data.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static InputStream openRawResource(@RawRes int id, TypedValue value) throws NotFoundException {
        return resources.openRawResource(id, value);
    }

    /**
     * Open a file descriptor for reading a raw resource.  This can only be used
     * with resources whose value is the name of an asset files -- that is, it can be
     * used to open drawable, sound, and raw resources; it will fail on string
     * and color resources.
     * <p/>
     * <p>This function only works for resources that are stored in the package
     * as uncompressed data, which typically includes things like mp3 files
     * and png images.
     *
     * @param id The resource identifier to open, as generated by the appt
     *           tool.
     * @return AssetFileDescriptor A new file descriptor you can use to read
     * the resource.  This includes the file descriptor itself, as well as the
     * offset and length of data where the resource appears in the file.  A
     * null is returned if the file exists but is compressed.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static AssetFileDescriptor openRawResourceFd(@RawRes int id) throws NotFoundException {
        return resources.openRawResourceFd(id);
    }

    /**
     * Return the raw data associated with a particular resource ID.
     *
     * @param id          The desired resource identifier, as generated by the aapt
     *                    tool. This integer encodes the package, type, and resource
     *                    entry. The value 0 is an invalid identifier.
     * @param outValue    Object in which to place the resource data.
     * @param resolveRefs If true, a resource that is a reference to another
     *                    resource will be followed so that you receive the
     *                    actual final resource data.  If false, the TypedValue
     *                    will be filled in with the reference itself.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static void getValue(@AnyRes int id, TypedValue outValue, boolean resolveRefs) throws NotFoundException {
        resources.getValue(id, outValue, resolveRefs);
    }

    /**
     * Get the raw value associated with a resource with associated density.
     *
     * @param id          resource identifier
     * @param density     density in DPI
     * @param resolveRefs If true, a resource that is a reference to another
     *                    resource will be followed so that you receive the actual final
     *                    resource data. If false, the TypedValue will be filled in with
     *                    the reference itself.
     * @throws NotFoundException Throws NotFoundException if the given ID does
     *                           not exist.
     * @see #getValue(String, TypedValue, boolean)
     */
    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1)
    public static void getValueForDensity(@AnyRes int id, int density, TypedValue outValue, boolean resolveRefs) throws NotFoundException {
        resources.getValueForDensity(id, density, outValue, resolveRefs);
    }

    /**
     * Return the raw data associated with a particular resource ID.
     * See getIdentifier() for information on how names are mapped to resource
     * IDs, and getString(int) for information on how string resources are
     * retrieved.
     * <p/>
     * <p>Note: use of this function is discouraged.  It is much more
     * efficient to retrieve resources by identifier than by name.
     *
     * @param name        The name of the desired resource.  This is passed to
     *                    getIdentifier() with a default type of "string".
     * @param outValue    Object in which to place the resource data.
     * @param resolveRefs If true, a resource that is a reference to another
     *                    resource will be followed so that you receive the
     *                    actual final resource data.  If false, the TypedValue
     *                    will be filled in with the reference itself.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     */
    public static void getValue(String name, TypedValue outValue, boolean resolveRefs) throws NotFoundException {
        resources.getValue(name, outValue, resolveRefs);
    }

    /**
     * Retrieve a set of basic attribute values from an AttributeSet, not
     * performing styling of them using a theme and/or style resources.
     *
     * @param set   The current attribute values to retrieve.
     * @param attrs The specific attributes to be retrieved.
     * @return Returns a TypedArray holding an array of the attribute values.
     * Be sure to call {@link TypedArray#recycle() TypedArray.recycle()}
     * when done with it.
     * @see Theme#obtainStyledAttributes(AttributeSet, int[], int, int)
     */
    public static TypedArray obtainAttributes(AttributeSet set, int[] attrs) {
        return resources.obtainAttributes(set, attrs);
    }

    /**
     * Store the newly updated configuration.
     */
    public static void updateConfiguration(Configuration config, DisplayMetrics metrics) {
        resources.updateConfiguration(config, metrics);
    }


    /**
     * Return the current display metrics that are in effect for this resource
     * object.  The returned object should be treated as read-only.
     *
     * @return The resource's current display metrics.
     */
    public static DisplayMetrics getDisplayMetrics() {
        return resources.getDisplayMetrics();
    }

    /**
     * Return the current configuration that is in effect for this resource
     * object.  The returned object should be treated as read-only.
     *
     * @return The resource's current configuration.
     */
    public static Configuration getConfiguration() {
        return resources.getConfiguration();
    }

    /**
     * Return a resource identifier for the given resource name.  A fully
     * qualified resource name is of the form "package:type/entry".  The first
     * two components (package and type) are optional if defType and
     * defPackage, respectively, are specified here.
     * <p/>
     * <p>Note: use of this function is discouraged.  It is much more
     * efficient to retrieve resources by identifier than by name.
     *
     * @param name       The name of the desired resource.
     * @param defType    Optional default resource type to find, if "type/" is
     *                   not included in the name.  Can be null to require an
     *                   explicit type.
     * @param defPackage Optional default package to find, if "package:" is
     *                   not included in the name.  Can be null to require an
     *                   explicit package.
     * @return int The associated resource identifier.  Returns 0 if no such
     * resource was found.  (0 is not a valid resource ID.)
     */
    public static int getIdentifier(String name, String defType, String defPackage) {
        return resources.getIdentifier(name, defType, defPackage);
    }

    /**
     * Return the full name for a given resource identifier.  This name is
     * a single string of the form "package:type/entry".
     *
     * @param resid The resource identifier whose name is to be retrieved.
     * @return A string holding the name of the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getResourcePackageName
     * @see #getResourceTypeName
     * @see #getResourceEntryName
     */
    public static String getResourceName(@AnyRes int resid) throws NotFoundException {
        return resources.getResourceName(resid);
    }

    /**
     * Return the package name for a given resource identifier.
     *
     * @param resid The resource identifier whose package name is to be
     *              retrieved.
     * @return A string holding the package name of the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getResourceName
     */
    public static String getResourcePackageName(@AnyRes int resid) throws NotFoundException {
        return resources.getResourcePackageName(resid);
    }

    /**
     * Return the type name for a given resource identifier.
     *
     * @param resid The resource identifier whose type name is to be
     *              retrieved.
     * @return A string holding the type name of the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getResourceName
     */
    public static String getResourceTypeName(@AnyRes int resid) throws NotFoundException {
        return resources.getResourceTypeName(resid);
    }

    /**
     * Return the entry name for a given resource identifier.
     *
     * @param resid The resource identifier whose entry name is to be
     *              retrieved.
     * @return A string holding the entry name of the resource.
     * @throws NotFoundException Throws NotFoundException if the given ID does not exist.
     * @see #getResourceName
     */
    public static String getResourceEntryName(@AnyRes int resid) throws NotFoundException {
        return resources.getResourceEntryName(resid);
    }

    /**
     * Retrieve underlying AssetManager storage for these resources.
     */
    public static final AssetManager getAssets() {
        return resources.getAssets();
    }

    /**
     * Call this to remove all cached loaded layout resources from the
     * Resources object.  Only intended for use with performance testing
     * tools.
     */
    public static final void flushLayoutCache() {
        resources.flushLayoutCache();
    }

    /**
     * Called by zygote when it is done preloading resources, to change back
     * to normal Resources operation.
     */
    public static final void finishPreloading() {
        resources.finishPreloading();
    }

}